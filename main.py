"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫—Ä–æ—Å—Å-–ø–æ—Å—Ç–∏–Ω–≥–∞ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏

–¢—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏:
pip install apscheduler async-timeout
"""

import asyncio
import logging
import signal
from datetime import datetime, timedelta
from pathlib import Path
from typing import Set, Optional

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore
from apscheduler.triggers.interval import IntervalTrigger

from config import (
    SEARCH_KEYWORDS,
    RESULTS_COUNT,
    PROCESSED_VIDEOS_FILE,
    CHECK_INTERVAL_SECONDS,
    MAX_FILE_SIZE_MB,
    DELETE_LOCAL_COPY
)

# –ò–º–ø–æ—Ä—Ç —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
from vk_parser import VKVideoParserAsync, VKParserError
from video_downloader import AsyncVideoDownloader, VideoDownloadError
from telegram_poster import AsyncTelegramPoster, TelegramPosterError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(name)s - %(message)s',
    handlers=[
        logging.FileHandler("app.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)

class ApplicationState:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.processed_videos: Set[str] = set()
        self.scheduler: Optional[AsyncIOScheduler] = None
        self.is_running = True

    async def load_processed_videos(self) -> None:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ"""
        try:
            path = Path(PROCESSED_VIDEOS_FILE)
            if await asyncio.to_thread(path.exists):
                async with asyncio.Lock():
                    content = await asyncio.to_thread(path.read_text, encoding='utf-8')
                    self.processed_videos = set(content.splitlines())
                logger.info(f"Loaded {len(self.processed_videos)} processed videos")
        except Exception as e:
            logger.error(f"Error loading processed videos: {e}")

    async def save_processed_video(self, video_id: str) -> None:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ"""
        try:
            async with asyncio.Lock():
                with open(PROCESSED_VIDEOS_FILE, 'a', encoding='utf-8') as f:
                    f.write(f"{video_id}\n")
                self.processed_videos.add(video_id)
        except Exception as e:
            logger.error(f"Error saving video ID {video_id}: {e}")

class Application:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.state = ApplicationState()
        self.vk_parser = VKVideoParserAsync()
        self.downloader = AsyncVideoDownloader()
        self.tg_poster = AsyncTelegramPoster()
        self._setup_scheduler()

    def _setup_scheduler(self) -> None:
        """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
        jobstores = {
            'default': SQLAlchemyJobStore(url='sqlite:///jobs.sqlite')
        }
        self.state.scheduler = AsyncIOScheduler(
            jobstores=jobstores,
            timezone="UTC"
        )

    async def startup(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        await self.state.load_processed_videos()
        self._register_signals()
        
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
        self.state.scheduler.add_job(
            self.process_videos,
            trigger=IntervalTrigger(
                seconds=CHECK_INTERVAL_SECONDS,
                start_date=datetime.now() + timedelta(seconds=10)
            ),
            max_instances=3
        )
        
        self.state.scheduler.start()
        logger.info("Application started")

    async def shutdown(self) -> None:
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        logger.info("Shutting down application...")
        self.state.is_running = False
        
        if self.state.scheduler:
            await asyncio.to_thread(self.state.scheduler.shutdown)
        
        await self.downloader.cleanup()
        logger.info("Cleanup completed")

    def _register_signals(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        loop = asyncio.get_running_loop()
        for signame in ('SIGINT', 'SIGTERM'):
            loop.add_signal_handler(
                getattr(signal, signame),
                lambda: asyncio.create_task(self.shutdown())
            )

    async def process_videos(self) -> None:
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å"""
        if not self.state.is_running:
            return

        logger.info("Starting video processing cycle")
        
        try:
            async with self.vk_parser, self.tg_poster:
                videos = await self.vk_parser.search_videos(
                    count=RESULTS_COUNT,
                    extended_metadata=True
                )
                
                for video in videos:
                    video_id = f"{video['owner_id']}_{video['id']}"
                    if video_id in self.state.processed_videos:
                        logger.debug(f"Skipping already processed video {video_id}")
                        continue
                    
                    await self._process_single_video(video, video_id)
                    
        except VKParserError as e:
            logger.error(f"VK processing error: {e}")
        except Exception as e:
            logger.error(f"Unexpected error: {e}")

    async def _process_single_video(self, video: dict, video_id: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ"""
        try:
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
            downloaded_path = await self.downloader.download(
                url=video['url'],
                filename=f"video_{video_id}",
                quality='720p'
            )
            
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram
            caption = self._generate_caption(video)
            await self.tg_poster.send_video(
                caption=caption,
                video_path=downloaded_path,
                stream_upload=True
            )
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            await self.state.save_processed_video(video_id)
            logger.info(f"Successfully processed video {video_id}")

        except VideoDownloadError as e:
            logger.warning(f"Download failed for {video_id}: {e}")
            await self._handle_download_failure(video)
            
        except TelegramPosterError as e:
            logger.error(f"Telegram post failed for {video_id}: {e}")
            await self._handle_posting_failure(downloaded_path)

    def _generate_caption(self, video: dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        title = video.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è').replace('*', '‚òÖ')
        description = video.get('description', '').replace('*', '‚òÖ')
        date = video['date'].strftime('%d.%m.%Y %H:%M')
        return (
            f"*{title}*\n\n"
            f"{description}\n\n"
            f"üìÖ {date} | üëÄ {video.get('views', 0)}"
        )

    async def _handle_download_failure(self, video: dict) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏"""
        try:
            caption = f"*–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ*\n{video['title']}\n{video['url']}"
            await self.tg_poster.send_text(caption)
        except Exception as e:
            logger.error(f"Failed to send error notification: {e}")

    async def _handle_posting_failure(self, video_path: Path) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        try:
            if video_path.exists():
                await self.downloader.cleanup()
        except Exception as e:
            logger.error(f"Cleanup error: {e}")

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    app = Application()
    await app.startup()
    
    while app.state.is_running:
        await asyncio.sleep(1)

if __name__ == '__main__':
    asyncio.run(main())
